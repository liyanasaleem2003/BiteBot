# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: python:3.8

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Cache dependencies between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend/node_modules/
    - backend/venv/

# Backend Tests
backend-test:
  stage: test
  script:
    - cd backend
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - python -m pytest test_db.py
  only:
    - main
    - merge_requests

# Frontend Tests
frontend-test:
  stage: test
  image: node:16
  script:
    - cd frontend
    - npm install
    - npm test -- --watchAll=false
  only:
    - main
    - merge_requests

# Build Backend
build-backend:
  stage: build
  script:
    - cd backend
    - docker build -t bitebot-backend:$CI_COMMIT_SHA .
    - docker tag bitebot-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
  only:
    - main

# Build Frontend
build-frontend:
  stage: build
  image: node:16
  script:
    - cd frontend
    - npm install
    - npm run build
    - docker build -t bitebot-frontend:$CI_COMMIT_SHA .
    - docker tag bitebot-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
  only:
    - main

# Deploy to Render
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST "https://api.render.com/deploy/srv-${RENDER_SERVICE_ID}?key=${RENDER_API_KEY}"
  environment:
    name: production
  only:
    - main
